{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Connected to des (Python 3.11.4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c586dc5e-7ba8-47de-a822-85babc924ccc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Run Number 0\n",
      "            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse  \\\n",
      "Patient ID                                                                 \n",
      "1               0.000000         0.410849      0.000000         0.752703   \n",
      "2               0.000000         1.388596      0.000000         7.003052   \n",
      "3               0.409535         5.534331      1.468722        19.266884   \n",
      "4               2.952230         2.909787     17.825819         3.127860   \n",
      "5               0.000000         1.420173     16.440199         4.230786   \n",
      "6               0.151780         0.692577     19.978408         0.819687   \n",
      "7               0.000000         0.022994     19.064658         3.126456   \n",
      "8               0.000000         0.768733     20.300174         8.497753   \n",
      "9               0.000000         3.373176     17.211891         4.953621   \n",
      "10              0.000000         1.398216     16.728505         1.381908   \n",
      "11              0.000000         1.143083     10.253207         2.748567   \n",
      "12              0.000000         1.612447     11.186509        13.713833   \n",
      "13              0.771833         0.903505     23.996837         0.054847   \n",
      "14              0.000000         0.441561     18.652435         2.035119   \n",
      "15              0.000000         1.445866     14.186830         0.721535   \n",
      "16              0.000000         0.181390      5.808063         1.648748   \n",
      "17              0.000000         1.690370      0.507757        12.752881   \n",
      "18              0.000000         0.314439     12.485348        18.310615   \n",
      "19              0.000000         1.482528     27.564601         0.946527   \n",
      "20              0.000000         0.812939     22.962119         6.533615   \n",
      "21              0.000000         7.815474     17.594217         0.413978   \n",
      "22              0.000000         0.135640     16.010343         2.522804   \n",
      "23              0.000000         1.065577      6.817332         1.571974   \n",
      "24              0.000000         0.392238           NaN              NaN   \n",
      "\n",
      "            Q Time Doctor  Time with Doctor  \n",
      "Patient ID                                   \n",
      "1                0.000000          0.499660  \n",
      "2                0.000000          7.492927  \n",
      "3                0.000000         11.457515  \n",
      "4                     NaN               NaN  \n",
      "5                     NaN               NaN  \n",
      "6                0.000000         75.132404  \n",
      "7                     NaN               NaN  \n",
      "8                     NaN               NaN  \n",
      "9                0.000000         22.626018  \n",
      "10                    NaN               NaN  \n",
      "11                    NaN               NaN  \n",
      "12                    NaN               NaN  \n",
      "13               4.726864          8.799978  \n",
      "14                    NaN               NaN  \n",
      "15                    NaN               NaN  \n",
      "16               9.121440         23.778999  \n",
      "17              20.147558         31.891305  \n",
      "18               5.186522         51.444118  \n",
      "19                    NaN               NaN  \n",
      "20                    NaN               NaN  \n",
      "21                    NaN               NaN  \n",
      "22                    NaN               NaN  \n",
      "23                    NaN               NaN  \n",
      "24                    NaN               NaN  \n",
      "Run Number 1\n",
      "            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse  \\\n",
      "Patient ID                                                                 \n",
      "1               0.000000         0.000585      0.000000         0.794968   \n",
      "2               0.000000         5.369506      0.000000         0.204486   \n",
      "3               4.929425         1.662339      0.000000         8.141832   \n",
      "4               4.816597         0.773802      7.368030         0.890423   \n",
      "5               5.409322         0.562387      7.696066         5.477124   \n",
      "6               0.000000         2.116598      7.909293         9.154369   \n",
      "7               0.000000         0.146116      8.243583         2.434862   \n",
      "8               0.000000         3.051975      0.645013         6.732500   \n",
      "9               0.000000         1.388698      0.000000         2.044290   \n",
      "10              0.000000         0.413595      0.000000         6.158587   \n",
      "11              0.000000         3.826511      0.835349         2.187230   \n",
      "12              3.005161         0.151975      2.870604        12.850659   \n",
      "13              2.813260         1.379381     14.341882         7.051088   \n",
      "14              0.452180         1.857154     19.535815         4.239335   \n",
      "15              0.689126         2.123463     21.651688         8.486243   \n",
      "16              0.000000         1.202048     24.363955         7.321807   \n",
      "17              0.015932         0.060168     31.625595         0.649149   \n",
      "18              0.000000         1.403400     27.899818         5.462762   \n",
      "19              0.000000         0.137755           NaN              NaN   \n",
      "20              0.000000         1.151514           NaN              NaN   \n",
      "\n",
      "            Q Time Doctor  Time with Doctor  \n",
      "Patient ID                                   \n",
      "1                     0.0          0.000000  \n",
      "2                     NaN               NaN  \n",
      "3                     0.0         22.337993  \n",
      "4                     0.0          2.755167  \n",
      "5                     0.0         19.326501  \n",
      "6                     NaN               NaN  \n",
      "7                     NaN               NaN  \n",
      "8                     NaN               NaN  \n",
      "9                     0.0          1.085115  \n",
      "10                    0.0         23.799737  \n",
      "11                    0.0          2.591937  \n",
      "12                    0.0         12.827667  \n",
      "13                    NaN               NaN  \n",
      "14                    NaN               NaN  \n",
      "15                    0.0          5.528587  \n",
      "16                    0.0         27.616926  \n",
      "17                    0.0         38.203543  \n",
      "18                    NaN               NaN  \n",
      "19                    NaN               NaN  \n",
      "20                    NaN               NaN  \n",
      "Run Number 2\n",
      "            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse  \\\n",
      "Patient ID                                                                 \n",
      "1               0.000000         2.300168      0.000000         0.678292   \n",
      "2               0.000000         5.818568      0.000000         6.708579   \n",
      "3               4.524943         0.875660      5.832919         1.311342   \n",
      "4               1.201696         0.983421      6.160840         0.365277   \n",
      "5               0.000000         3.363020      2.054179         8.361632   \n",
      "6               0.000000         1.339042      0.590451         4.283447   \n",
      "7               0.000000         0.848113      3.250355         0.940618   \n",
      "8               0.000000         3.980942      0.000000         0.440648   \n",
      "9               0.000000         1.720365      0.000000         3.924897   \n",
      "10              0.000000         2.229580      0.000000         2.669528   \n",
      "11              1.400990         0.115877      2.553651         0.652751   \n",
      "12              0.000000         5.042763      0.000000         4.823166   \n",
      "13              0.000000         1.012892      0.000000         1.688724   \n",
      "14              0.000000         1.744032      0.000000         0.016123   \n",
      "15              0.000000         2.510465      0.000000        25.514037   \n",
      "16              0.000000         1.263093     23.244899         0.012154   \n",
      "17              0.000000         0.180677     20.467092         1.650508   \n",
      "18              0.000000         4.703385     16.722824         8.215871   \n",
      "19              0.000000         0.349965     20.283919         2.228234   \n",
      "20              0.000000         0.014112     22.032957         4.077491   \n",
      "21              0.000000         0.579906     23.490459         5.215287   \n",
      "22              0.000000         2.365479           NaN              NaN   \n",
      "23              0.000000         0.490139           NaN              NaN   \n",
      "24              0.000000         0.178862           NaN              NaN   \n",
      "25              0.000000         0.491895           NaN              NaN   \n",
      "26              0.000000         9.199222           NaN              NaN   \n",
      "\n",
      "            Q Time Doctor  Time with Doctor  \n",
      "Patient ID                                   \n",
      "1                0.000000         11.709306  \n",
      "2                0.000000          6.447306  \n",
      "3                0.000000         26.092588  \n",
      "4                4.770687         19.225694  \n",
      "5               15.634749          9.146561  \n",
      "6               13.082231         29.460622  \n",
      "7                     NaN               NaN  \n",
      "8                     NaN               NaN  \n",
      "9               11.444280          2.014386  \n",
      "10               9.341836         16.542754  \n",
      "11              25.231839         22.780867  \n",
      "12                    NaN               NaN  \n",
      "13               4.318655         10.534191  \n",
      "14              10.543074         12.789086  \n",
      "15               0.000000         22.914055  \n",
      "16               0.000000          7.892291  \n",
      "17               6.241784          2.790954  \n",
      "18               0.816866         14.054312  \n",
      "19                    NaN               NaN  \n",
      "20                    NaN               NaN  \n",
      "21                    NaN               NaN  \n",
      "22                    NaN               NaN  \n",
      "23                    NaN               NaN  \n",
      "24                    NaN               NaN  \n",
      "25                    NaN               NaN  \n",
      "26                    NaN               NaN  \n",
      "Run Number 3\n",
      "            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse  \\\n",
      "Patient ID                                                                 \n",
      "1               0.000000         0.535100      0.000000         0.600830   \n",
      "2               0.220720         1.610035      0.000000         1.021874   \n",
      "3               0.000000         1.165504      0.000000         6.426205   \n",
      "4               0.000000         4.690886      0.846175         0.273165   \n",
      "5               2.187005         0.633429      0.485911        12.558755   \n",
      "6               0.000000         5.193014      7.649261         2.795803   \n",
      "7               4.110787         1.678199      8.766865         6.263033   \n",
      "8               3.831438         2.895810     12.134088         6.441436   \n",
      "9               2.612452         1.317232     17.258292         3.172276   \n",
      "10              0.000000         0.495254     16.862388         8.822261   \n",
      "11              0.000000         1.524941     18.407704        32.035300   \n",
      "12              1.490835         1.876531     48.566473         4.706285   \n",
      "13              1.885219         3.412297     49.860462        16.382734   \n",
      "14              3.522312         8.732558     57.510637         1.447110   \n",
      "15             11.249549         4.721066     54.236682        19.558843   \n",
      "16              6.862578         1.205208           NaN              NaN   \n",
      "17              7.165194         1.352928           NaN              NaN   \n",
      "18              2.898187         0.660308           NaN              NaN   \n",
      "19              0.000000         6.260582           NaN              NaN   \n",
      "20              0.000000         0.111271           NaN              NaN   \n",
      "21              0.000000         1.356923           NaN              NaN   \n",
      "22              0.000000         1.005028           NaN              NaN   \n",
      "23              0.000000         0.587211           NaN              NaN   \n",
      "24              0.000000         2.191130           NaN              NaN   \n",
      "25              1.932941         1.899278           NaN              NaN   \n",
      "26              1.000135         5.025137           NaN              NaN   \n",
      "27              0.000000         7.771558           NaN              NaN   \n",
      "28              6.979763         1.213203           NaN              NaN   \n",
      "29              6.683367         2.237854           NaN              NaN   \n",
      "\n",
      "            Q Time Doctor  Time with Doctor  \n",
      "Patient ID                                   \n",
      "1                0.000000         78.134790  \n",
      "2                0.000000         22.869828  \n",
      "3               13.236039          8.191808  \n",
      "4               21.154683         73.464890  \n",
      "5                     NaN               NaN  \n",
      "6               50.842199         21.366464  \n",
      "7                     NaN               NaN  \n",
      "8               59.504194          5.361216  \n",
      "9                     NaN               NaN  \n",
      "10              52.870873          8.355966  \n",
      "11                    NaN               NaN  \n",
      "12              17.824424         52.315796  \n",
      "13                    NaN               NaN  \n",
      "14               6.655409          5.651194  \n",
      "15                    NaN               NaN  \n",
      "16                    NaN               NaN  \n",
      "17                    NaN               NaN  \n",
      "18                    NaN               NaN  \n",
      "19                    NaN               NaN  \n",
      "20                    NaN               NaN  \n",
      "21                    NaN               NaN  \n",
      "22                    NaN               NaN  \n",
      "23                    NaN               NaN  \n",
      "24                    NaN               NaN  \n",
      "25                    NaN               NaN  \n",
      "26                    NaN               NaN  \n",
      "27                    NaN               NaN  \n",
      "28                    NaN               NaN  \n",
      "29                    NaN               NaN  \n",
      "Run Number 4\n",
      "            Q Time Recep  Time with Recep  Q Time Nurse  Time with Nurse  \\\n",
      "Patient ID                                                                 \n",
      "1               0.000000         1.674955      0.000000         9.823320   \n",
      "2               0.000000         6.049092      3.659990        10.398509   \n",
      "3               5.302442         2.495208     11.563291         4.517060   \n",
      "4               2.862857         0.105421     15.974930        10.195550   \n",
      "5               0.000000         0.895208     23.974731         0.994901   \n",
      "6               0.000000         1.740862     20.128337        15.307091   \n",
      "7               1.513010         0.335303     35.100125         0.070130   \n",
      "8               0.000000         4.480193     29.676876        13.448537   \n",
      "9               4.260335         0.731461     42.393952         0.802131   \n",
      "10              3.711355         0.624485     42.571598         4.986089   \n",
      "11              0.869407         1.489781     46.067906         1.008483   \n",
      "12              0.520529         0.662184     46.414205         0.774545   \n",
      "13              0.000000         0.510222     46.227815        17.306598   \n",
      "14              0.000000         2.390111     57.166339        11.963571   \n",
      "15              1.129757         2.311275     66.818634         3.648016   \n",
      "16              2.319778         0.475930     69.990720         3.186767   \n",
      "17              0.000000         1.651588     70.829429        13.644441   \n",
      "18              0.000000         1.220002           NaN              NaN   \n",
      "19              0.000000         0.877459           NaN              NaN   \n",
      "20              0.000000         0.294240           NaN              NaN   \n",
      "21              0.000000         0.908841           NaN              NaN   \n",
      "22              0.000000         1.973065           NaN              NaN   \n",
      "23              0.000000         0.361923           NaN              NaN   \n",
      "24              0.000000         1.885260           NaN              NaN   \n",
      "25              0.000000         1.230304           NaN              NaN   \n",
      "26              0.000000         0.817413           NaN              NaN   \n",
      "27              0.000000         0.112383           NaN              NaN   \n",
      "28              0.000000         0.831039           NaN              NaN   \n",
      "29              0.000000         1.819999           NaN              NaN   \n",
      "30              0.000000         0.955337           NaN              NaN   \n",
      "31              0.000000         0.232051           NaN              NaN   \n",
      "32              0.000000         2.922513           NaN              NaN   \n",
      "33              0.000000         6.455467           NaN              NaN   \n",
      "\n",
      "            Q Time Doctor  Time with Doctor  \n",
      "Patient ID                                   \n",
      "1                0.000000          1.276915  \n",
      "2                     NaN               NaN  \n",
      "3                     NaN               NaN  \n",
      "4                0.000000         26.980764  \n",
      "5                     NaN               NaN  \n",
      "6                0.000000          8.639581  \n",
      "7                     NaN               NaN  \n",
      "8                     NaN               NaN  \n",
      "9                0.000000          8.719015  \n",
      "10                    NaN               NaN  \n",
      "11               0.000000         41.117600  \n",
      "12               1.949898         12.940637  \n",
      "13               0.000000         56.639800  \n",
      "14              11.072886          9.152102  \n",
      "15                    NaN               NaN  \n",
      "16                    NaN               NaN  \n",
      "17                    NaN               NaN  \n",
      "18                    NaN               NaN  \n",
      "19                    NaN               NaN  \n",
      "20                    NaN               NaN  \n",
      "21                    NaN               NaN  \n",
      "22                    NaN               NaN  \n",
      "23                    NaN               NaN  \n",
      "24                    NaN               NaN  \n",
      "25                    NaN               NaN  \n",
      "26                    NaN               NaN  \n",
      "27                    NaN               NaN  \n",
      "28                    NaN               NaN  \n",
      "29                    NaN               NaN  \n",
      "30                    NaN               NaN  \n",
      "31                    NaN               NaN  \n",
      "32                    NaN               NaN  \n",
      "33                    NaN               NaN  \n",
      "Trial Results\n",
      "            Mean Q Time Recep  Mean Q Time Nurse  Mean Q Time Doctor\n",
      "Run Number                                                          \n",
      "0                    0.178557          13.784520            4.353598\n",
      "1                    1.106550           9.721483            0.000000\n",
      "2                    0.274140           6.984978            6.761733\n",
      "3                    2.228706          19.505662           24.676424\n",
      "4                    0.681499          36.974051            1.627848\n"
     ]
    }
   ],
   "source": [
    "import simpy\n",
    "import random\n",
    "import pandas as pd\n",
    "\n",
    "# Class to store global parameter values.  We don't create an instance of this\n",
    "# class - we just refer to the class blueprint itself to access the numbers\n",
    "# inside.\n",
    "class g:\n",
    "    patient_inter = 5\n",
    "    mean_reception_time = 2\n",
    "    mean_n_consult_time = 6\n",
    "    mean_d_consult_time = 20 ##NEW\n",
    "    number_of_receptionists = 1\n",
    "    number_of_nurses = 1\n",
    "    number_of_doctors = 2 ##NEW\n",
    "    prob_seeing_doctor = 0.6 ##NEW\n",
    "    sim_duration = 120\n",
    "    number_of_runs = 5\n",
    "\n",
    "# Class representing patients coming in to the clinic.\n",
    "class Patient:\n",
    "    def __init__(self, p_id):\n",
    "        self.id = p_id\n",
    "        self.q_time_recep = 0\n",
    "        self.q_time_nurse = 0\n",
    "        self.q_time_doctor = 0 ##NEW\n",
    "\n",
    "# Class representing our model of the clinic.\n",
    "class Model:\n",
    "    # Constructor to set up the model for a run.  We pass in a run number when\n",
    "    # we create a new model.\n",
    "    def __init__(self, run_number):\n",
    "        # Create a SimPy environment in which everything will live\n",
    "        self.env = simpy.Environment()\n",
    "\n",
    "        # Create a patient counter (which we'll use as a patient ID)\n",
    "        self.patient_counter = 0\n",
    "\n",
    "        # Create our resources\n",
    "        self.receptionist = simpy.Resource(\n",
    "            self.env, capacity=g.number_of_receptionists\n",
    "        )\n",
    "        self.nurse = simpy.Resource(self.env, capacity=g.number_of_nurses)\n",
    "        self.doctor = simpy.Resource(\n",
    "            self.env, capacity=g.number_of_doctors) ##NEW\n",
    "\n",
    "        # Store the passed in run number\n",
    "        self.run_number = run_number\n",
    "\n",
    "        # Create a new Pandas DataFrame that will store some results against\n",
    "        # the patient ID (which we'll use as the index).\n",
    "        self.results_df = pd.DataFrame()\n",
    "        self.results_df[\"Patient ID\"] = [1]\n",
    "        self.results_df[\"Q Time Recep\"] = [0.0]\n",
    "        self.results_df[\"Time with Recep\"] = [0.0]\n",
    "        self.results_df[\"Q Time Nurse\"] = [0.0]\n",
    "        self.results_df[\"Time with Nurse\"] = [0.0]\n",
    "        self.results_df[\"Q Time Doctor\"] = [0.0] ##NEW\n",
    "        self.results_df[\"Time with Doctor\"] = [0.0] ##NEW\n",
    "        self.results_df.set_index(\"Patient ID\", inplace=True)\n",
    "\n",
    "        # Create an attribute to store the mean queuing times across this run of\n",
    "        # the model\n",
    "        self.mean_q_time_recep = 0\n",
    "        self.mean_q_time_nurse = 0\n",
    "        self.mean_q_time_doctor = 0 ##NEW\n",
    "\n",
    "    # A generator function that represents the DES generator for patient\n",
    "    # arrivals\n",
    "    def generator_patient_arrivals(self):\n",
    "        # We use an infinite loop here to keep doing this indefinitely whilst\n",
    "        # the simulation runs\n",
    "        while True:\n",
    "            # Increment the patient counter by 1 (this means our first patient\n",
    "            # will have an ID of 1)\n",
    "            self.patient_counter += 1\n",
    "            \n",
    "            # Create a new patient - an instance of the Patient Class we\n",
    "            # defined above.  Remember, we pass in the ID when creating a\n",
    "            # patient - so here we pass the patient counter to use as the ID.\n",
    "            p = Patient(self.patient_counter)\n",
    "\n",
    "            # Tell SimPy to start up the attend_clinic generator function with\n",
    "            # this patient (the generator function that will model the\n",
    "            # patient's journey through the system)\n",
    "            self.env.process(self.attend_clinic(p))\n",
    "\n",
    "            # Randomly sample the time to the next patient arriving.  Here, we\n",
    "            # sample from an exponential distribution (common for inter-arrival\n",
    "            # times), and pass in a lambda value of 1 / mean.  The mean\n",
    "            # inter-arrival time is stored in the g class.\n",
    "            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n",
    "\n",
    "            # Freeze this instance of this function in place until the\n",
    "            # inter-arrival time we sampled above has elapsed.  Note - time in\n",
    "            # SimPy progresses in \"Time Units\", which can represent anything\n",
    "            # you like (just make sure you're consistent within the model)\n",
    "            yield self.env.timeout(sampled_inter)\n",
    "\n",
    "    # A generator function that represents the pathway for a patient going\n",
    "    # through the clinic.\n",
    "    # The patient object is passed in to the generator function so we can \n",
    "    # extract information from / record information to it\n",
    "    def attend_clinic(self, patient):\n",
    "        start_q_recep = self.env.now\n",
    "\n",
    "        with self.receptionist.request() as req:\n",
    "            yield req\n",
    "\n",
    "            end_q_recep = self.env.now\n",
    "\n",
    "            patient.q_time_recep = end_q_recep - start_q_recep\n",
    "\n",
    "            sampled_recep_act_time = random.expovariate(\n",
    "                1.0 / g.mean_reception_time\n",
    "            )\n",
    "\n",
    "            self.results_df.at[patient.id, \"Q Time Recep\"] = (\n",
    "                 patient.q_time_recep\n",
    "            )\n",
    "            self.results_df.at[patient.id, \"Time with Recep\"] = (\n",
    "                 sampled_recep_act_time\n",
    "            )\n",
    "\n",
    "            yield self.env.timeout(sampled_recep_act_time)\n",
    "\n",
    "        # Here's where the patient finishes with the receptionist, and starts\n",
    "        # queuing for the nurse\n",
    "\n",
    "        # Record the time the patient started queuing for a nurse\n",
    "        start_q_nurse = self.env.now\n",
    "\n",
    "        # This code says request a nurse resource, and do all of the following\n",
    "        # block of code with that nurse resource held in place (and therefore\n",
    "        # not usable by another patient)\n",
    "        with self.nurse.request() as req:\n",
    "            # Freeze the function until the request for a nurse can be met.\n",
    "            # The patient is currently queuing.\n",
    "            yield req\n",
    "\n",
    "            # When we get to this bit of code, control has been passed back to\n",
    "            # the generator function, and therefore the request for a nurse has\n",
    "            # been met.  We now have the nurse, and have stopped queuing, so we\n",
    "            # can record the current time as the time we finished queuing.\n",
    "            end_q_nurse = self.env.now\n",
    "\n",
    "            # Calculate the time this patient was queuing for the nurse, and\n",
    "            # record it in the patient's attribute for this.\n",
    "            patient.q_time_nurse = end_q_nurse - start_q_nurse\n",
    "\n",
    "            # Now we'll randomly sample the time this patient with the nurse.\n",
    "            # Here, we use an Exponential distribution for simplicity, but you\n",
    "            # would typically use a Log Normal distribution for a real model\n",
    "            # (we'll come back to that).  As with sampling the inter-arrival\n",
    "            # times, we grab the mean from the g class, and pass in 1 / mean\n",
    "            # as the lambda value.\n",
    "            sampled_nurse_act_time = random.expovariate(1.0 / \n",
    "                                                        g.mean_n_consult_time)\n",
    "            \n",
    "            # Here we'll store the queuing time for the nurse and the sampled\n",
    "            # time to spend with the nurse in the results DataFrame against the\n",
    "            # ID for this patient.  In real world models, you may not want to\n",
    "            # bother storing the sampled activity times - but as this is a\n",
    "            # simple model, we'll do it here.\n",
    "            # We use a handy property of pandas called .at, which works a bit\n",
    "            # like .loc.  .at allows us to access (and therefore change) a\n",
    "            # particular cell in our DataFrame by providing the row and column.\n",
    "            # Here, we specify the row as the patient ID (the index), and the\n",
    "            # column for the value we want to update for that patient.\n",
    "            self.results_df.at[patient.id, \"Q Time Nurse\"] = (\n",
    "                patient.q_time_nurse)\n",
    "            self.results_df.at[patient.id, \"Time with Nurse\"] = (\n",
    "                sampled_nurse_act_time)\n",
    "            \n",
    "            # Freeze this function in place for the activity time we sampled\n",
    "            # above.  This is the patient spending time with the nurse.\n",
    "            yield self.env.timeout(sampled_nurse_act_time)\n",
    "\n",
    "            # When the time above elapses, the generator function will return \n",
    "            # here.  As there's nothing more that we've written, the function\n",
    "            # will simply end.  This is a sink.  We could choose to add\n",
    "            # something here if we wanted to record something - e.g. a counter\n",
    "            # for number of patients that left, recording something about the\n",
    "            # patients that left at a particular sink etc.\n",
    "\n",
    "        ##NEW added conditional logic to see if patient goes on to see doctor\n",
    "        # We sample from the uniform distribution between 0 and 1.  If the value\n",
    "        # is less than the probability of seeing a doctor (stored in g Class)\n",
    "        # then we say the patient sees a doctor.\n",
    "        # If not, this block of code won't be run and the patient will just\n",
    "        # leave the system (we could add in an else if we wanted a branching\n",
    "        # path to another activity instead)\n",
    "        if random.uniform(0,1) < g.prob_seeing_doctor:\n",
    "            start_q_doctor = self.env.now\n",
    "\n",
    "            with self.doctor.request() as req:\n",
    "                yield req\n",
    "\n",
    "                end_q_doctor = self.env.now\n",
    "\n",
    "                patient.q_time_doctor = end_q_doctor - start_q_doctor\n",
    "\n",
    "                sampled_doctor_act_time = random.expovariate(\n",
    "                    1.0 / g.mean_d_consult_time\n",
    "                )\n",
    "\n",
    "                self.results_df.at[patient.id, \"Q Time Doctor\"] = (\n",
    "                    patient.q_time_doctor\n",
    "                )\n",
    "                self.results_df.at[patient.id, \"Time with Doctor\"] = (\n",
    "                    sampled_doctor_act_time\n",
    "                )\n",
    "\n",
    "                yield self.env.timeout(sampled_doctor_act_time)\n",
    "\n",
    "    # This method calculates results over a single run.  Here we just calculate\n",
    "    # a mean, but in real world models you'd probably want to calculate more.\n",
    "    def calculate_run_results(self):\n",
    "        # Take the mean of the queuing times across patients in this run of the \n",
    "        # model.\n",
    "        self.mean_q_time_recep = self.results_df[\"Q Time Recep\"].mean()\n",
    "        self.mean_q_time_nurse = self.results_df[\"Q Time Nurse\"].mean()\n",
    "        self.mean_q_time_doctor = self.results_df[\"Q Time Doctor\"].mean() ##NEW\n",
    "\n",
    "    # The run method starts up the DES entity generators, runs the simulation,\n",
    "    # and in turns calls anything we need to generate results for the run\n",
    "    def run(self):\n",
    "        # Start up our DES entity generators that create new patients.  We've\n",
    "        # only got one in this model, but we'd need to do this for each one if\n",
    "        # we had multiple generators.\n",
    "        self.env.process(self.generator_patient_arrivals())\n",
    "\n",
    "        # Run the model for the duration specified in g class\n",
    "        self.env.run(until=g.sim_duration)\n",
    "\n",
    "        # Now the simulation run has finished, call the method that calculates\n",
    "        # run results\n",
    "        self.calculate_run_results()\n",
    "\n",
    "        # Print the run number with the patient-level results from this run of \n",
    "        # the model\n",
    "        print (f\"Run Number {self.run_number}\")\n",
    "        print (self.results_df)\n",
    "\n",
    "# Class representing a Trial for our simulation - a batch of simulation runs.\n",
    "class Trial:\n",
    "    # The constructor sets up a pandas dataframe that will store the key\n",
    "    # results from each run against run number, with run number as the index.\n",
    "    def  __init__(self):\n",
    "        self.df_trial_results = pd.DataFrame()\n",
    "        self.df_trial_results[\"Run Number\"] = [0]\n",
    "        self.df_trial_results[\"Mean Q Time Recep\"] = [0.0]\n",
    "        self.df_trial_results[\"Mean Q Time Nurse\"] = [0.0]\n",
    "        self.df_trial_results[\"Mean Q Time Doctor\"] = [0.0] ##NEW\n",
    "        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n",
    "\n",
    "    # Method to print out the results from the trial.  In real world models,\n",
    "    # you'd likely save them as well as (or instead of) printing them\n",
    "    def print_trial_results(self):\n",
    "        print (\"Trial Results\")\n",
    "        print (self.df_trial_results)\n",
    "\n",
    "    # Method to run a trial\n",
    "    def run_trial(self):\n",
    "        # Run the simulation for the number of runs specified in g class.\n",
    "        # For each run, we create a new instance of the Model class and call its\n",
    "        # run method, which sets everything else in motion.  Once the run has\n",
    "        # completed, we grab out the stored run results (just mean queuing time\n",
    "        # here) and store it against the run number in the trial results\n",
    "        # dataframe.\n",
    "        for run in range(g.number_of_runs):\n",
    "            my_model = Model(run)\n",
    "            my_model.run()\n",
    "            \n",
    "            ##NEW - added mean queue time for doctor to end of list\n",
    "            self.df_trial_results.loc[run] = [my_model.mean_q_time_recep,\n",
    "                                              my_model.mean_q_time_nurse,\n",
    "                                              my_model.mean_q_time_doctor]\n",
    "\n",
    "        # Once the trial (ie all runs) has completed, print the final results\n",
    "        self.print_trial_results()\n",
    "\n",
    "# Create an instance of the Trial class\n",
    "my_trial = Trial()\n",
    "\n",
    "# Call the run_trial method of our Trial object\n",
    "my_trial.run_trial()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "des",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
